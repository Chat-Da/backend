import org.hidetake.gradle.swagger.generator.GenerateSwaggerUI
import org.springframework.boot.gradle.tasks.bundling.BootJar

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
	id 'org.asciidoctor.jvm.convert' version '3.3.2'
	id 'com.epages.restdocs-api-spec' version '0.19.4'
	id 'org.hidetake.swagger.generator' version '2.18.2'
}

group = 'site.chatda'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'com.epages:restdocs-api-spec-mockmvc:0.19.4'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	// db
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'com.h2database:h2'

	// jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

	swaggerUI 'org.webjars:swagger-ui:4.11.1'
}

tasks.named('test') {
	useJUnitPlatform()
}

swaggerSources {
	sample {
		setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
	}
}

ext {
	serverUrl = project.findProperty('serverUrl')
}

openapi3 {
	server = "${serverUrl}"
	title = 'Chat-Da API Docs'
	description = 'Con:Seat API description'
	version = '0.1.0'
	format = 'yaml'
}

tasks.withType(GenerateSwaggerUI).configureEach {
	dependsOn 'openapi3'
}

tasks.register('copySwaggerUI', Copy) {
	dependsOn 'generateSwaggerUISample'
	def generateSwaggerUISampleTask = tasks.named('generateSwaggerUISample', GenerateSwaggerUI).get()
	from("${generateSwaggerUISampleTask.outputDir}")
	into("${project.buildDir}/resources/main/static/api/docs")
}

tasks.withType(BootJar).configureEach {
	dependsOn 'copySwaggerUI'
}

tasks.named('jar').configure {
	dependsOn("openapi3")
}

tasks.named('jar') {
	dependsOn 'copySwaggerUI'
}

tasks.named('resolveMainClassName') {
	dependsOn 'copySwaggerUI'
}
